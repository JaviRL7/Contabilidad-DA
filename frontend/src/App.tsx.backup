import { useState, useEffect } from 'react'
import axios from 'axios'
import confetti from 'canvas-confetti'
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar } from 'recharts'
import { parseISO } from 'date-fns'
import DatePicker from 'react-datepicker'
import 'react-datepicker/dist/react-datepicker.css'
import './datepicker.css'
import { BarChart3, TrendingUp, Plus } from 'lucide-react'
import Login from './components/Login'
import { useAuth } from './hooks/useAuth'
import MonthlyBreakdownTemp from './MonthlyBreakdownTemp'

// Component for custom number input with styled buttons
interface NumberInputProps {
  value: string
  onChange: (value: string) => void
  placeholder?: string
  step?: number
  min?: number
  max?: number
  className?: string
  isDark?: boolean
}

const NumberInput: React.FC<NumberInputProps> = ({
  value,
  onChange,
  placeholder = "0.00",
  step = 0.01,
  min,
  max,
  className = "",
  isDark = false
}) => {
  const increment = () => {
    const current = parseFloat(value) || 0
    const newValue = Math.min(current + step, max || Infinity)
    onChange(newValue.toFixed(2))
  }

  const decrement = () => {
    const current = parseFloat(value) || 0
    const newValue = Math.max(current - step, min || 0)
    onChange(newValue.toFixed(2))
  }

  return (
    <div className="relative">
      <input
        type="number"
        value={value}
        onChange={(e) => onChange(e.target.value)}
        placeholder={placeholder}
        step={step}
        min={min}
        max={max}
        className={`pr-8 ${className} [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none appearance-none`}
        style={{ MozAppearance: 'textfield' }}
      />
      <div className="absolute right-1 top-1/2 transform -translate-y-1/2 flex flex-col">
        <button
          type="button"
          onClick={increment}
          className={`px-1 py-0.5 text-xs hover:scale-110 transition-transform ${
            isDark 
              ? 'text-gray-400 hover:text-gray-200' 
              : 'text-gray-600 hover:text-gray-800'
          }`}
        >
          <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 24 24">
            <path d="M7 14l5-5 5 5z"/>
          </svg>
        </button>
        <button
          type="button"
          onClick={decrement}
          className={`px-1 py-0.5 text-xs hover:scale-110 transition-transform ${
            isDark 
              ? 'text-gray-400 hover:text-gray-200' 
              : 'text-gray-600 hover:text-gray-800'
          }`}
        >
          <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 24 24">
            <path d="M7 10l5 5 5-5z"/>
          </svg>
        </button>
      </div>
    </div>
  )
}

interface Ingreso {
  id: number
  monto: number
  etiqueta: string
  fecha: string
  created_at?: string
}

interface Gasto {
  id: number
  monto: number
  etiqueta: string
  fecha: string
  created_at?: string
  es_recurrente?: boolean
  recurrente_id?: number
}

interface MovimientoDiario {
  id: number
  fecha: string
  ingreso_total: number
  ingresos: Ingreso[]
  gastos: Gasto[]
  total_gastos: number
  balance: number
  created_at?: string
  updated_at?: string
}

const API_BASE_URL = 'http://localhost:8001/api'

const formatEuro = (amount: number): string => {
  return `${amount.toFixed(2)} €`
}

const handleNumberChange = (
  currentValue: string | number,
  setter: React.Dispatch<React.SetStateAction<any>>,
  key: string,
  delta: number,
  decimalPlaces: number = 2 // Default to 2 for currency
) => {
  const numValue = parseFloat(currentValue.toString()) || 0;
  const newValue = (numValue + delta).toFixed(decimalPlaces);
  setter(prev => ({ ...prev, [key]: newValue }));
};

// Funciones para localStorage
const saveGastosRecurrentesToStorage = (gastos: Array<{
  id: number;
  etiqueta: string;
  monto: number;
  frecuencia: 'mensual' | 'semanal' | 'diario' | 'anual';
  diaMes?: number;
  ultimoProcesado?: string;
}>) => {
  localStorage.setItem('gastosRecurrentes', JSON.stringify(gastos))
}

const loadGastosRecurrentesFromStorage = () => {
  const saved = localStorage.getItem('gastosRecurrentes')
  if (saved) {
    try {
      return JSON.parse(saved)
    } catch (error) {
      console.error('Error al cargar gastos recurrentes del localStorage:', error)
      return []
    }
  }
  return []
}

// Etiquetas predefinidas
const ETIQUETAS_PREDEFINIDAS = {
  ingresos: [
    'Ventas', 'Ventas con tarjeta', 'Ventas Bolsos', 'Ventas conjuntos a mano'
  ],
  gastos: [
    'luz', 'agua', 'hipoteca', 'internet', 'telefono', 'gas', 'Seguro', 'gastos de sevilla', 'inversiones', 'obras'
  ]
}

// Componente Modal de confirmación
interface ModalProps {
  isOpen: boolean
  onClose: () => void
  onConfirm: () => void
  title: string
  message: string
}

const Modal = ({ isOpen, onClose, onConfirm, title, message }: ModalProps) => {
  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-sm mx-4">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">{title}</h3>
        <p className="text-gray-600 dark:text-gray-300 mb-6">{message}</p>
        <div className="flex gap-3 justify-end">
          <button
            onClick={onClose}
            className="group relative overflow-hidden px-3 py-1.5 rounded-lg text-sm font-medium transition-all duration-200 bg-gradient-to-r from-gray-500 to-gray-400 text-white shadow-md hover:shadow-gray-400/25 hover:from-gray-400 hover:to-gray-300 dark:from-gray-600 dark:to-gray-500 dark:hover:shadow-gray-500/25 dark:hover:from-gray-500 dark:hover:to-gray-400"
          >
            <span className="relative z-10">Cancelar</span>
          </button>
          <button
            onClick={onConfirm}
            className="group relative overflow-hidden px-3 py-1.5 rounded-lg text-sm font-medium transition-all duration-200 bg-gradient-to-r from-red-600 to-red-500 text-white shadow-md hover:shadow-red-500/25 hover:from-red-500 hover:to-red-400"
          >
            <span className="relative z-10 flex items-center gap-1">
              <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
              Borrar
            </span>
          </button>
        </div>
      </div>
    </div>
  )
}

// Componente Modal para editar etiquetas
interface EditTagModalProps {
  isOpen: boolean
  onClose: () => void
  onConfirm: () => void
  onToggleEssential: () => void
  title: string
  editingTag: {tipo: 'ingreso' | 'gasto', etiqueta: string} | null
  editedTagName: string
  setEditedTagName: (value: string) => void
  isDark: boolean
  etiquetasEsenciales: string[]
}

const EditTagModal = ({ isOpen, onClose, onConfirm, onToggleEssential, title, editingTag, editedTagName, setEditedTagName, isDark, etiquetasEsenciales }: EditTagModalProps) => {
  if (!isOpen) return null

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onConfirm()
  }

  const isEssential = editingTag ? etiquetasEsenciales.includes(editingTag.etiqueta.toLowerCase()) : false
  const isGastoTag = editingTag?.tipo === 'gasto'

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md mx-4 w-full">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">{title}</h3>
        <form onSubmit={handleSubmit}>
          <p className="text-gray-600 dark:text-gray-300 mb-4">
            Editar etiqueta de {editingTag?.tipo === 'ingreso' ? 'ingreso' : 'gasto'}:
          </p>
          <input
            type="text"
            value={editedTagName}
            onChange={(e) => setEditedTagName(e.target.value)}
            className={`w-full px-3 py-2 rounded border mb-4 ${
              isDark 
                ? 'bg-gray-600 border-gray-500 text-white placeholder-gray-400' 
                : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'
            }`}
            placeholder="Nombre de la etiqueta"
            autoFocus
          />
          
          {/* Toggle para etiquetas esenciales (solo para gastos) */}
          {isGastoTag && (
            <div className="mb-6">
              <label className="flex items-center space-x-3">
                <input
                  type="checkbox"
                  checked={isEssential}
                  onChange={onToggleEssential}
                  className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                />
                <span className="text-sm font-medium text-gray-900 dark:text-gray-300">
                  Marcar como gasto esencial
                </span>
              </label>
              <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                Los gastos esenciales aparecen destacados en los análisis
              </p>
            </div>
          )}

          <div className="flex gap-2 justify-end">
            <button
              type="button"
              onClick={onClose}
              className={`px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                isDark
                  ? 'bg-gray-600 text-white hover:bg-gray-500'
                  : 'bg-gray-500 text-white hover:bg-gray-600'
              }`}
            >
              Cancelar
            </button>
            <button
              type="submit"
              className={`px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                isDark
                  ? 'bg-blue-600 text-white hover:bg-blue-500'
                  : 'bg-blue-500 text-white hover:bg-blue-600'
              }`}
            >
              Guardar
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

// Componente Modal para crear nueva etiqueta durante creación de movimientos
interface CreateTagModalProps {
  isOpen: boolean
  onClose: () => void
  onConfirm: (tagName: string, tipo: 'ingreso' | 'gasto') => void
  tipo: 'ingreso' | 'gasto'
  isDark: boolean
}

const CreateTagModal = ({ isOpen, onClose, onConfirm, tipo, isDark }: CreateTagModalProps) => {
  const [tagName, setTagName] = useState('')

  if (!isOpen) return null

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (tagName.trim()) {
      onConfirm(tagName.trim(), tipo)
      setTagName('')
    }
  }

  const handleClose = () => {
    setTagName('')
    onClose()
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md mx-4 w-full">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          Crear Nueva Etiqueta
        </h3>
        <form onSubmit={handleSubmit}>
          <p className="text-gray-600 dark:text-gray-300 mb-4">
            Crear etiqueta de {tipo === 'ingreso' ? 'ingreso' : 'gasto'}:
          </p>
          <input
            type="text"
            value={tagName}
            onChange={(e) => setTagName(e.target.value)}
            className={`w-full px-3 py-2 rounded border mb-4 ${
              isDark 
                ? 'bg-gray-600 border-gray-500 text-white placeholder-gray-400' 
                : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'
            }`}
            placeholder="Nombre de la nueva etiqueta"
            autoFocus
          />
          
          <div className="flex gap-2 justify-end">
            <button
              type="button"
              onClick={handleClose}
              className={`px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                isDark
                  ? 'bg-gray-600 text-white hover:bg-gray-500'
                  : 'bg-gray-500 text-white hover:bg-gray-600'
              }`}
            >
              Cancelar
            </button>
            <button
              type="submit"
              disabled={!tagName.trim()}
              className={`px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                !tagName.trim()
                  ? 'bg-gray-400 text-gray-200 cursor-not-allowed'
                  : isDark
                    ? 'bg-green-600 text-white hover:bg-green-500'
                    : 'bg-green-500 text-white hover:bg-green-600'
              }`}
            >
              Crear
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

// Componente Modal para ver detalles de etiqueta
interface ViewTagModalProps {
  isOpen: boolean
  onClose: () => void
  tag: {tipo: 'ingreso' | 'gasto', etiqueta: string} | null
  movimientos: MovimientoDiario[]
  isDark: boolean
}

const ViewTagModal = ({ isOpen, onClose, tag, movimientos, isDark }: ViewTagModalProps) => {
  if (!isOpen || !tag) return null

  // Calcular estadísticas de la etiqueta
  const estadisticas = (() => {
    let totalMonto = 0
    let conteoTransacciones = 0
    const mesesConTransacciones = new Set<string>()
    const transaccionesPorMes: { [mes: string]: number } = {}

    movimientos.forEach(mov => {
      const fecha = new Date(mov.fecha)
      const mesKey = `${fecha.getFullYear()}-${(fecha.getMonth() + 1).toString().padStart(2, '0')}`
      const mesNombre = fecha.toLocaleDateString('es-ES', { month: 'long', year: 'numeric' })

      if (tag.tipo === 'ingreso') {
        mov.ingresos.forEach(ingreso => {
          if (ingreso.etiqueta === tag.etiqueta) {
            totalMonto += ingreso.monto
            conteoTransacciones++
            mesesConTransacciones.add(mesNombre)
            transaccionesPorMes[mesNombre] = (transaccionesPorMes[mesNombre] || 0) + ingreso.monto
          }
        })
      } else {
        mov.gastos.forEach(gasto => {
          if (gasto.etiqueta === tag.etiqueta) {
            totalMonto += gasto.monto
            conteoTransacciones++
            mesesConTransacciones.add(mesNombre)
            transaccionesPorMes[mesNombre] = (transaccionesPorMes[mesNombre] || 0) + gasto.monto
          }
        })
      }
    })

    const mesesOrdenados = Object.keys(transaccionesPorMes).sort()
    const mediaMensual = mesesConTransacciones.size > 0 ? totalMonto / mesesConTransacciones.size : 0

    return {
      totalMonto,
      conteoTransacciones,
      mesesActivos: mesesConTransacciones.size,
      mediaMensual,
      transaccionesPorMes,
      mesesOrdenados
    }
  })()

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className={`${isDark ? 'bg-gray-800' : 'bg-white'} rounded-lg p-6 max-w-2xl mx-4 w-full max-h-[80vh] overflow-y-auto`}>
        <div className="flex justify-between items-center mb-6">
          <h3 className={`text-xl font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>
            Resumen de "{tag.etiqueta}"
          </h3>
          <button
            onClick={onClose}
            className={`p-2 rounded-full hover:bg-opacity-10 ${
              isDark ? 'hover:bg-white text-gray-400' : 'hover:bg-gray-600 text-gray-600'
            }`}
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* Estadísticas principales */}
        <div className="grid md:grid-cols-3 gap-4 mb-6">
          <div className={`p-4 rounded-lg border ${
            isDark ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'
          }`}>
            <div className={`text-2xl font-bold mb-1 ${
              tag.tipo === 'ingreso' ? 'text-green-500' : 'text-red-500'
            }`}>
              {formatEuro(estadisticas.totalMonto)}
            </div>
            <div className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
              Total {tag.tipo === 'ingreso' ? 'ingresos' : 'gastos'}
            </div>
          </div>
          
          <div className={`p-4 rounded-lg border ${
            isDark ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'
          }`}>
            <div className="text-2xl font-bold text-blue-500 mb-1">
              {estadisticas.conteoTransacciones}
            </div>
            <div className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
              Transacciones
            </div>
          </div>
          
          <div className={`p-4 rounded-lg border ${
            isDark ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'
          }`}>
            <div className="text-2xl font-bold text-purple-500 mb-1">
              {formatEuro(estadisticas.mediaMensual)}
            </div>
            <div className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
              Media mensual ({estadisticas.mesesActivos} meses)
            </div>
          </div>
        </div>

        {/* Desglose por meses */}
        {estadisticas.mesesOrdenados.length > 0 && (
          <div>
            <h4 className={`text-lg font-medium mb-4 ${isDark ? 'text-gray-200' : 'text-gray-700'}`}>
              Desglose por Meses
            </h4>
            <div className="space-y-2 max-h-60 overflow-y-auto">
              {estadisticas.mesesOrdenados.map(mes => (
                <div key={mes} className={`p-3 rounded-lg border ${
                  isDark ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'
                } flex justify-between items-center`}>
                  <span className={`font-medium ${isDark ? 'text-gray-200' : 'text-gray-800'}`}>
                    {mes}
                  </span>
                  <span className={`font-bold ${
                    tag.tipo === 'ingreso' ? 'text-green-500' : 'text-red-500'
                  }`}>
                    {formatEuro(estadisticas.transaccionesPorMes[mes])}
                  </span>
                </div>
              ))}
            </div>
          </div>
        )}

        {estadisticas.conteoTransacciones === 0 && (
          <div className={`p-8 text-center rounded-lg border ${
            isDark ? 'border-gray-600 bg-gray-700' : 'border-gray-200 bg-gray-50'
          }`}>
            <svg className="w-12 h-12 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 00-2-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
            </svg>
            <p className={`${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
              No hay transacciones registradas para esta etiqueta
            </p>
          </div>
        )}
      </div>
    </div>
  )
}

// Componente Modal para editar gastos recurrentes
interface EditRecurrentModalProps {
  isOpen: boolean
  onClose: () => void
  onConfirm: (recurrent: {etiqueta: string, monto: number, frecuencia: 'mensual' | 'semanal' | 'diario' | 'anual', diaMes?: number}) => void
  recurrent: {
    id: number;
    etiqueta: string;
    monto: number;
    frecuencia: 'mensual' | 'semanal' | 'diario' | 'anual';
    diaMes?: number;
  } | null
  etiquetas: string[]
  isDark: boolean
}

const EditRecurrentModal = ({ isOpen, onClose, onConfirm, recurrent, etiquetas, isDark }: EditRecurrentModalProps) => {
  const [editedRecurrent, setEditedRecurrent] = useState({
    etiqueta: '',
    monto: '',
    frecuencia: 'mensual' as 'mensual' | 'semanal' | 'diario' | 'anual',
    diaMes: ''
  })

  useEffect(() => {
    if (recurrent) {
      setEditedRecurrent({
        etiqueta: recurrent.etiqueta,
        monto: recurrent.monto.toString(),
        frecuencia: recurrent.frecuencia,
        diaMes: recurrent.diaMes?.toString() || ''
      })
    }
  }, [recurrent])

  if (!isOpen || !recurrent) return null

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (!editedRecurrent.etiqueta || !editedRecurrent.monto) return

    onConfirm({
      etiqueta: editedRecurrent.etiqueta,
      monto: parseFloat(editedRecurrent.monto),
      frecuencia: editedRecurrent.frecuencia,
      diaMes: editedRecurrent.diaMes ? parseInt(editedRecurrent.diaMes) : undefined
    })
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className={`${isDark ? 'bg-gray-800' : 'bg-white'} rounded-lg p-6 max-w-md mx-4 w-full`}>
        <h3 className={`text-lg font-semibold ${isDark ? 'text-white' : 'text-gray-900'} mb-4`}>
          Editar Gasto Recurrente
        </h3>
        
        <form onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div>
              <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                Etiqueta
              </label>
              <div className="relative">
                <select 
                  value={editedRecurrent.etiqueta}
                  onChange={(e) => {
                    if (e.target.value === '__nueva__') {
                      handleCreateNewTag('editedRecurrent.etiqueta', 'gasto')
                    } else {
                      setEditedRecurrent(prev => ({...prev, etiqueta: e.target.value}))
                    }
                  }}
                  className={`appearance-none w-full px-3 py-2 pr-10 rounded-lg border ${
                    isDark 
                      ? 'bg-gray-600 border-gray-500 text-white hover:bg-gray-500 hover:border-gray-400' 
                      : 'bg-white border-gray-300 text-gray-900 hover:bg-gray-50 hover:border-gray-400'
                  } focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-200`}
                >
                  <option value="">Seleccionar etiqueta...</option>
                  {etiquetas.map(etiq => (
                    <option key={etiq} value={etiq}>{etiq}</option>
                  ))}
                  <option value="__nueva__">
                    <Plus size={14} className="inline mr-1" />
                    Crear nueva etiqueta
                  </option>
                </select>
                <div className={`pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 ${isDark ? 'text-gray-400' : 'text-gray-700'}`}>
                  <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
                  </svg>
                </div>
              </div>
            </div>
            
            <div>
              <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                Monto
              </label>
              <div className="relative">
                <input
                  type="number"
                  step="0.01"
                  value={editedRecurrent.monto}
                  onChange={(e) => setEditedRecurrent(prev => ({...prev, monto: e.target.value}))}
                  className={`pr-8 w-full px-3 py-2 rounded-lg border focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none appearance-none ${
                    isDark 
                      ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400'
                      : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'
                  }`}
                  placeholder="0.00"
                />
                {/* Custom increment/decrement buttons */}
                <div className="absolute right-1 top-1 bottom-1 flex flex-col">
                  <button
                    type="button"
                    onClick={() => {
                      const currentValue = parseFloat(editedRecurrent.monto) || 0;
                      setEditedRecurrent(prev => ({...prev, monto: (currentValue + 0.01).toFixed(2)}));
                    }}
                    className={`flex-1 px-2 rounded-t border-l text-xs font-bold transition-colors ${
                      isDark
                        ? 'bg-gray-700 hover:bg-gray-600 text-gray-300 hover:text-white border-gray-600'
                        : 'bg-gray-100 hover:bg-gray-200 text-gray-600 hover:text-gray-800 border-gray-300'
                    }`}
                  >
                    +
                  </button>
                  <button
                    type="button"
                    onClick={() => {
                      const currentValue = parseFloat(editedRecurrent.monto) || 0;
                      const newValue = Math.max(0, currentValue - 0.01);
                      setEditedRecurrent(prev => ({...prev, monto: newValue.toFixed(2)}));
                    }}
                    className={`flex-1 px-2 rounded-b border-l border-t text-xs font-bold transition-colors ${
                      isDark
                        ? 'bg-gray-700 hover:bg-gray-600 text-gray-300 hover:text-white border-gray-600'
                        : 'bg-gray-100 hover:bg-gray-200 text-gray-600 hover:text-gray-800 border-gray-300'
                    }`}
                  >
                    −
                  </button>
                </div>
              </div>
            </div>

            <div>
              <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                Frecuencia
              </label>
              <div className="relative">
                <select 
                  value={editedRecurrent.frecuencia}
                  onChange={(e) => setEditedRecurrent(prev => ({...prev, frecuencia: e.target.value as any}))}
                  className={`appearance-none w-full px-3 py-2 pr-10 rounded-lg border ${
                    isDark 
                      ? 'bg-gray-600 border-gray-500 text-white hover:bg-gray-500 hover:border-gray-400' 
                      : 'bg-white border-gray-300 text-gray-900 hover:bg-gray-50 hover:border-gray-400'
                  } focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-200`}
                >
                  <option value="mensual">Mensual</option>
                  <option value="semanal">Semanal</option>
                  <option value="diario">Diario</option>
                  <option value="anual">Anual</option>
                </select>
                <div className={`pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 ${isDark ? 'text-gray-400' : 'text-gray-700'}`}>
                  <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
                  </svg>
                </div>
              </div>
            </div>
            
            {editedRecurrent.frecuencia === 'mensual' && (
              <div>
                <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                  Día del mes
                </label>
                <div className="relative">
                  <input
                    type="number"
                    min="1"
                    max="31"
                    value={editedRecurrent.diaMes}
                    onChange={(e) => setEditedRecurrent(prev => ({...prev, diaMes: e.target.value}))}
                    className={`pr-8 w-full px-3 py-2 rounded-lg border focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none appearance-none ${
                      isDark 
                        ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400'
                        : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'
                    }`}
                    placeholder="Ej: 1"
                  />
                  {/* Custom increment/decrement buttons */}
                  <div className="absolute right-1 top-1 bottom-1 flex flex-col">
                    <button
                      type="button"
                      onClick={() => {
                        const currentValue = parseInt(editedRecurrent.diaMes) || 0;
                        const newValue = Math.min(31, currentValue + 1);
                        setEditedRecurrent(prev => ({...prev, diaMes: newValue.toString()}));
                      }}
                      className={`flex-1 px-2 rounded-t border-l text-xs font-bold transition-colors ${
                        isDark
                          ? 'bg-gray-700 hover:bg-gray-600 text-gray-300 hover:text-white border-gray-600'
                          : 'bg-gray-100 hover:bg-gray-200 text-gray-600 hover:text-gray-800 border-gray-300'
                      }`}
                    >
                      +
                    </button>
                    <button
                      type="button"
                      onClick={() => {
                        const currentValue = parseInt(editedRecurrent.diaMes) || 0;
                        const newValue = Math.max(1, currentValue - 1);
                        setEditedRecurrent(prev => ({...prev, diaMes: newValue.toString()}));
                      }}
                      className={`flex-1 px-2 rounded-b border-l border-t text-xs font-bold transition-colors ${
                        isDark
                          ? 'bg-gray-700 hover:bg-gray-600 text-gray-300 hover:text-white border-gray-600'
                          : 'bg-gray-100 hover:bg-gray-200 text-gray-600 hover:text-gray-800 border-gray-300'
                      }`}
                    >
                      −
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
          
          <div className="flex gap-3 justify-end mt-6">
            <button
              type="button"
              onClick={onClose}
              className={`group relative overflow-hidden px-3 py-1.5 rounded-lg text-sm font-medium transition-all duration-200 ${
                isDark
                  ? 'bg-gradient-to-r from-gray-600 to-gray-500 text-white shadow-md hover:shadow-gray-500/25 hover:from-gray-500 hover:to-gray-400'
                  : 'bg-gradient-to-r from-gray-500 to-gray-400 text-white shadow-md hover:shadow-gray-400/25 hover:from-gray-400 hover:to-gray-300'
              }`}
            >
              <span className="relative z-10">Cancelar</span>
            </button>
            <button
              type="submit"
              disabled={!editedRecurrent.etiqueta || !editedRecurrent.monto}
              className={`group relative overflow-hidden px-3 py-1.5 rounded-lg text-sm font-medium transition-all duration-200 ${
                !editedRecurrent.etiqueta || !editedRecurrent.monto
                  ? isDark
                    ? 'bg-gray-700 text-gray-500 cursor-not-allowed'
                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : isDark
                    ? 'bg-gradient-to-r from-blue-600 to-blue-500 text-white shadow-md hover:shadow-blue-500/25 hover:from-blue-500 hover:to-blue-400'
                    : 'bg-gradient-to-r from-blue-500 to-blue-400 text-white shadow-md hover:shadow-blue-400/25 hover:from-blue-400 hover:to-blue-300'
              }`}
            >
              <span className="relative z-10 flex items-center gap-1">
                <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
                Guardar
              </span>
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

// Componente Modal de edición avanzado
interface EditModalProps {
  isOpen: boolean
  onClose: () => void
  movimiento: MovimientoDiario | null
  isDark: boolean
  onDeleteItem: (movimientoId: number, tipo: 'ingreso' | 'gasto', itemId: number) => void
  onSaveChanges: (movimiento: MovimientoDiario) => void
  etiquetas: {
    ingresos: string[]
    gastos: string[]
  }
}

const EditModal = ({ isOpen, onClose, movimiento: originalMovimiento, isDark, onDeleteItem, onSaveChanges, etiquetas }: EditModalProps) => {
  const [editedMovimiento, setEditedMovimiento] = useState<MovimientoDiario | null>(null)
  const [editingItem, setEditingItem] = useState<{tipo: 'ingreso' | 'gasto', id: number} | null>(null)
  const [showAddForm, setShowAddForm] = useState<'ingreso' | 'gasto' | null>(null)
  const [tempValues, setTempValues] = useState({etiqueta: '', monto: ''})
  const [newItem, setNewItem] = useState({tipo: '', etiqueta: '', monto: ''})

  useEffect(() => {
    if (originalMovimiento) {
      setEditedMovimiento({...originalMovimiento})
    }
  }, [originalMovimiento])

  if (!isOpen || !editedMovimiento) return null

  const handleSave = () => {
    if (editedMovimiento) {
      onSaveChanges(editedMovimiento)
      onClose()
    }
  }

  const handleDateChange = (newDate: string) => {
    setEditedMovimiento(prev => prev ? {...prev, fecha: newDate} : null)
  }

  const handleEditItem = (tipo: 'ingreso' | 'gasto', id: number, etiqueta: string, monto: number) => {
    setEditingItem({tipo, id})
    setTempValues({etiqueta, monto: monto.toString()})
  }

  const handleSaveEdit = () => {
    if (!editingItem) return
    
    const monto = parseFloat(tempValues.monto)
    if (isNaN(monto) || monto <= 0) return

    setEditedMovimiento(prev => {
      if (!prev) return null
      
      if (editingItem.tipo === 'ingreso') {
        const newIngresos = prev.ingresos.map(i => 
          i.id === editingItem.id 
            ? {...i, etiqueta: tempValues.etiqueta, monto}
            : i
        )
        const newTotal = newIngresos.reduce((sum, i) => sum + i.monto, 0)
        return {
          ...prev,
          ingresos: newIngresos,
          ingreso_total: newTotal,
          balance: newTotal - prev.total_gastos
        }
      } else {
        const newGastos = prev.gastos.map(g => 
          g.id === editingItem.id 
            ? {...g, etiqueta: tempValues.etiqueta, monto}
            : g
        )
        const newTotal = newGastos.reduce((sum, g) => sum + g.monto, 0)
        return {
          ...prev,
          gastos: newGastos,
          total_gastos: newTotal,
          balance: prev.ingreso_total - newTotal
        }
      }
    })
    
    setEditingItem(null)
    setTempValues({etiqueta: '', monto: ''})
  }

  const handleAddItem = () => {
    const monto = parseFloat(newItem.monto)
    if (!newItem.etiqueta || isNaN(monto) || monto <= 0) return

    const newId = Date.now() // Temporal ID
    const item = {
      id: newId,
      etiqueta: newItem.etiqueta,
      monto,
      fecha: editedMovimiento.fecha,
      created_at: new Date().toISOString()
    }

    setEditedMovimiento(prev => {
      if (!prev) return null
      
      if (showAddForm === 'ingreso') {
        const newIngresos = [...prev.ingresos, item]
        const newTotal = newIngresos.reduce((sum, i) => sum + i.monto, 0)
        return {
          ...prev,
          ingresos: newIngresos,
          ingreso_total: newTotal,
          balance: newTotal - prev.total_gastos
        }
      } else {
        const newGastos = [...prev.gastos, item]
        const newTotal = newGastos.reduce((sum, g) => sum + g.monto, 0)
        return {
          ...prev,
          gastos: newGastos,
          total_gastos: newTotal,
          balance: prev.ingreso_total - newTotal
        }
      }
    })

    setNewItem({tipo: '', etiqueta: '', monto: ''})
    setShowAddForm(null)
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className={`${isDark ? 'bg-gray-800' : 'bg-white'} rounded-2xl shadow-2xl max-w-4xl w-full max-h-[95vh] overflow-auto`}>
        {/* Header */}
        <div className={`flex justify-between items-center p-6 border-b ${isDark ? 'border-gray-700' : 'border-gray-200'}`}>
          <div className="flex items-center gap-4">
            <div>
              <h2 className={`text-2xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                Editar Movimiento
              </h2>
              <div className="flex items-center gap-2 mt-2">
                <DatePicker
                  selected={parseISO(editedMovimiento.fecha)}
                  onChange={(date: Date) => handleDateChange(formatDateForAPI(date))}
                  className={`w-full px-3 py-1 rounded-lg border text-sm ${
                    isDark 
                      ? 'bg-gray-700 border-gray-600 text-white' 
                      : 'bg-white border-gray-300 text-gray-900'
                  }`}
                  wrapperClassName="w-full"
                  dateFormat="yyyy-MM-dd"
                />
              </div>
            </div>
          </div>
          <button
            onClick={onClose}
            className={`p-2 rounded-lg transition-colors ${
              isDark 
                ? 'hover:bg-gray-700 text-gray-400 hover:text-white' 
                : 'hover:bg-gray-100 text-gray-500 hover:text-gray-700'
            }`}
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* Content */}
        <div className="p-6">
          <div className="grid md:grid-cols-2 gap-8 relative">
            {/* Línea separadora vertical */}
            <div className="hidden md:block absolute left-1/2 top-0 bottom-0 w-px transform -translate-x-1/2">
              <div className={`h-full w-full ${
                isDark 
                  ? 'bg-gradient-to-b from-transparent via-gray-500/30 to-transparent' 
                  : 'bg-gradient-to-b from-transparent via-gray-300/40 to-transparent'
              }`}></div>
            </div>

            {/* Ingresos */}
            <div className="pr-3">
              <div className="flex justify-between items-center mb-4">
                <div>
                  <h3 className="text-green-500 font-semibold text-lg mb-2">
                    Ingresos ({formatEuro(editedMovimiento.ingreso_total)})
                  </h3>
                  <div className={`h-px w-full ${
                    isDark 
                      ? 'bg-gradient-to-r from-transparent via-green-400/30 to-transparent' 
                      : 'bg-gradient-to-r from-transparent via-green-500/40 to-transparent'
                  }`}></div>
                </div>
                <button
                  onClick={() => setShowAddForm('ingreso')}
                  className="p-2 rounded-lg bg-green-500 hover:bg-green-600 text-white transition-colors"
                  title="Agregar ingreso"
                >
                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clipRule="evenodd" />
                  </svg>
                </button>
              </div>

              {/* Formulario agregar ingreso */}
              {showAddForm === 'ingreso' && (
                <div className={`p-4 rounded-lg border mb-4 ${
                  isDark ? 'bg-gray-700 border-gray-600' : 'bg-green-50 border-green-200'
                }`}>
                  <div className="space-y-3">
                    <div className="relative">
                      <select
                        value={newItem.etiqueta}
                        onChange={(e) => {
                          if (e.target.value === '__nueva__') {
                            handleCreateNewTag('newItem.etiqueta', 'ingreso')
                          } else {
                            setNewItem(prev => ({...prev, etiqueta: e.target.value}))
                          }
                        }}
                        className={`appearance-none w-full px-3 py-2 pr-10 rounded border ${
                          isDark 
                            ? 'bg-gray-600 border-gray-500 text-white hover:bg-gray-500 hover:border-gray-400' 
                            : 'bg-white border-gray-300 text-gray-900 hover:bg-gray-50 hover:border-gray-400'
                        } focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-200`}
                      >
                        <option value="">Seleccionar etiqueta...</option>
                        {etiquetas.ingresos.map(etiq => (
                          <option key={etiq} value={etiq}>{etiq}</option>
                        ))}
                        <option value="__nueva__">+ Crear nueva etiqueta</option>
                      </select>
                      <div className={`pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 ${isDark ? 'text-gray-400' : 'text-gray-700'}`}>
                        <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                          <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
                        </svg>
                      </div>
                    </div>
                    <div className="relative">
                      <input
                        type="number"
                        step="0.01"
                        placeholder="Monto"
                        value={newItem.monto}
                        onChange={(e) => setNewItem(prev => ({...prev, monto: e.target.value}))}
                        className={`w-full px-3 py-2 rounded border pr-10 ${
                          isDark 
                            ? 'bg-gray-600 border-gray-500 text-white' 
                            : 'bg-white border-gray-300 text-gray-900'
                        } appearance-none [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none`}
                      />
                      <div className="absolute inset-y-0 right-0 flex flex-col items-center justify-center pr-2">
                        <button
                          type="button"
                          onClick={() => handleNumberChange(newItem.monto, setNewItem, 'monto', 0.01)}
                          className={`h-1/2 w-6 flex items-center justify-center rounded-t-md ${isDark ? 'text-gray-400 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-200'}`}
                        >
                          <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 15l7-7 7 7"></path></svg>
                        </button>
                        <button
                          type="button"
                          onClick={() => handleNumberChange(newItem.monto, setNewItem, 'monto', -0.01)}
                          className={`h-1/2 w-6 flex items-center justify-center rounded-b-md ${isDark ? 'text-gray-400 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-200'}`}
                        >
                          <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7"></path></svg>
                        </button>
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <button
                        onClick={handleAddItem}
                        className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
                      >
                        Agregar
                      </button>
                      <button
                        onClick={() => setShowAddForm(null)}
                        className={`px-4 py-2 rounded transition-colors ${
                          isDark 
                            ? 'bg-gray-600 text-gray-300 hover:bg-gray-500' 
                            : 'bg-gray-300 text-gray-700 hover:bg-gray-400'
                        }`}
                      >
                        Cancelar
                      </button>
                    </div>
                  </div>
                </div>
              )}
              
              {editedMovimiento.ingresos.length > 0 ? (
                <div className="space-y-3">
                  {editedMovimiento.ingresos.map((ingreso) => (
                    <div key={ingreso.id} className={`p-3 rounded-lg border ${
                      isDark ? 'bg-gray-700 border-gray-600' : 'bg-green-50 border-green-200'
                    }`}>
                      {editingItem?.tipo === 'ingreso' && editingItem?.id === ingreso.id ? (
                        <div className="space-y-2">
                          <div className="relative">
                            <select
                              value={tempValues.etiqueta}
                              onChange={(e) => setTempValues(prev => ({...prev, etiqueta: e.target.value}))}
                              className={`appearance-none w-full px-2 py-1 pr-10 rounded border text-sm ${
                                isDark 
                                  ? 'bg-gray-600 border-gray-500 text-white hover:bg-gray-500 hover:border-gray-400' 
                                  : 'bg-white border-gray-300 text-gray-900 hover:bg-gray-50 hover:border-gray-400'
                              } focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-200`}
                            >
                              {etiquetas.ingresos.map(etiq => (
                                <option key={etiq} value={etiq}>{etiq}</option>
                              ))}
                            </select>
                            <div className={`pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 ${isDark ? 'text-gray-400' : 'text-gray-700'}`}>
                              <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
                              </svg>
                            </div>
                          </div>
                          <input
                            type="number"
                            step="0.01"
                            value={tempValues.monto}
                            onChange={(e) => setTempValues(prev => ({...prev, monto: e.target.value}))}
                            className={`w-full px-2 py-1 rounded border text-sm ${
                              isDark 
                                ? 'bg-gray-600 border-gray-500 text-white' 
                                : 'bg-white border-gray-300 text-gray-900'
                            }`}
                          />
                          <div className="flex gap-1">
                            <button
                              onClick={handleSaveEdit}
                              className="px-3 py-1 bg-green-600 text-white rounded text-sm hover:bg-green-700"
                            >
                              ✓
                            </button>
                            <button
                              onClick={() => setEditingItem(null)}
                              className="px-3 py-1 bg-gray-500 text-white rounded text-sm hover:bg-gray-600"
                            >
                              ✕
                            </button>
                          </div>
                        </div>
                      ) : (
                        <div className="flex justify-between items-center">
                          <div className="cursor-pointer" onClick={() => handleEditItem('ingreso', ingreso.id, ingreso.etiqueta, ingreso.monto)}>
                            <div className={`font-medium ${isDark ? 'text-gray-200' : 'text-gray-800'}`}>
                              {ingreso.etiqueta}
                            </div>
                            <div className="text-green-500 font-semibold text-sm">
                              {formatEuro(ingreso.monto)}
                            </div>
                          </div>
                          <button
                            onClick={() => {
                              setDeleteAction(() => () => onDeleteItem(editedMovimiento.id, 'ingreso', ingreso.id))
                              setShowDeleteModal(true)
                            }}
                            className="group p-2 rounded-lg hover:bg-red-500/10 transition-colors"
                            title="Eliminar ingreso"
                          >
                            <svg className="w-4 h-4 text-red-500 group-hover:text-red-600" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" clipRule="evenodd" />
                              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                            </svg>
                          </button>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              ) : (
                <div className={`text-center py-8 ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                  <p className="text-sm italic">No hay ingresos</p>
                </div>
              )}
            </div>

            {/* Gastos */}
            <div className="pl-3">
              <div className="flex justify-between items-center mb-4">
                <div>
                  <h3 className="text-red-500 font-semibold text-lg mb-2">
                    Gastos ({formatEuro(editedMovimiento.total_gastos)})
                  </h3>
                  <div className={`h-px w-full ${
                    isDark 
                      ? 'bg-gradient-to-r from-transparent via-red-400/30 to-transparent' 
                      : 'bg-gradient-to-r from-transparent via-red-500/40 to-transparent'
                  }`}></div>
                </div>
                <button
                  onClick={() => setShowAddForm('gasto')}
                  className="p-2 rounded-lg bg-red-500 hover:bg-red-600 text-white transition-colors"
                  title="Agregar gasto"
                >
                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clipRule="evenodd" />
                  </svg>
                </button>
              </div>

              {/* Formulario agregar gasto */}
              {showAddForm === 'gasto' && (
                <div className={`p-4 rounded-lg border mb-4 ${
                  isDark ? 'bg-gray-700 border-gray-600' : 'bg-red-50 border-red-200'
                }`}>
                  <div className="space-y-3">
                    <div className="relative">
                      <select
                        value={newItem.etiqueta}
                        onChange={(e) => {
                          if (e.target.value === '__nueva__') {
                            handleCreateNewTag('newItem.etiqueta', 'gasto')
                          } else {
                            setNewItem(prev => ({...prev, etiqueta: e.target.value}))
                          }
                        }}
                        className={`appearance-none w-full px-3 py-2 pr-10 rounded border ${
                          isDark 
                            ? 'bg-gray-600 border-gray-500 text-white hover:bg-gray-500 hover:border-gray-400' 
                            : 'bg-white border-gray-300 text-gray-900 hover:bg-gray-50 hover:border-gray-400'
                        } focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-200`}
                      >
                        <option value="">Seleccionar etiqueta...</option>
                        {etiquetas.gastos.map(etiq => (
                          <option key={etiq} value={etiq}>{etiq}</option>
                        ))}
                        <option value="__nueva__">+ Crear nueva etiqueta</option>
                      </select>
                      <div className={`pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 ${isDark ? 'text-gray-400' : 'text-gray-700'}`}>
                        <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                          <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
                        </svg>
                      </div>
                    </div>
                    <input
                      type="number"
                      step="0.01"
                      placeholder="Monto"
                      value={newItem.monto}
                      onChange={(e) => setNewItem(prev => ({...prev, monto: e.target.value}))}
                      className={`w-full px-3 py-2 rounded border ${
                        isDark 
                          ? 'bg-gray-600 border-gray-500 text-white' 
                          : 'bg-white border-gray-300 text-gray-900'
                      }`}
                    />
                    <div className="flex gap-2">
                      <button
                        onClick={handleAddItem}
                        className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
                      >
                        Agregar
                      </button>
                      <button
                        onClick={() => setShowAddForm(null)}
                        className={`px-4 py-2 rounded transition-colors ${
                          isDark 
                            ? 'bg-gray-600 text-gray-300 hover:bg-gray-500' 
                            : 'bg-gray-300 text-gray-700 hover:bg-gray-400'
                        }`}
                      >
                        Cancelar
                      </button>
                    </div>
                  </div>
                </div>
              )}
              
              {editedMovimiento.gastos.length > 0 ? (
                <div className="space-y-3">
                  {editedMovimiento.gastos.map((gasto) => (
                    <div key={gasto.id} className={`p-3 rounded-lg border ${
                      isDark ? 'bg-gray-700 border-gray-600' : 'bg-red-50 border-red-200'
                    }`}>
                      {editingItem?.tipo === 'gasto' && editingItem?.id === gasto.id ? (
                        <div className="space-y-2">
                          <div className="relative">
                            <select
                              value={tempValues.etiqueta}
                              onChange={(e) => setTempValues(prev => ({...prev, etiqueta: e.target.value}))}
                              className={`appearance-none w-full px-2 py-1 pr-10 rounded border text-sm ${
                                isDark 
                                  ? 'bg-gray-600 border-gray-500 text-white hover:bg-gray-500 hover:border-gray-400' 
                                  : 'bg-white border-gray-300 text-gray-900 hover:bg-gray-50 hover:border-gray-400'
                              } focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-200`}
                            >
                              {etiquetas.gastos.map(etiq => (
                                <option key={etiq} value={etiq}>{etiq}</option>
                              ))}
                            </select>
                            <div className={`pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 ${isDark ? 'text-gray-400' : 'text-gray-700'}`}>
                              <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
                              </svg>
                            </div>
                          </div>
                          <input
                            type="number"
                            step="0.01"
                            value={tempValues.monto}
                            onChange={(e) => setTempValues(prev => ({...prev, monto: e.target.value}))}
                            className={`w-full px-2 py-1 rounded border text-sm ${
                              isDark 
                                ? 'bg-gray-600 border-gray-500 text-white' 
                                : 'bg-white border-gray-300 text-gray-900'
                            }`}
                          />
                          <div className="flex gap-1">
                            <button
                              onClick={handleSaveEdit}
                              className="px-3 py-1 bg-green-600 text-white rounded text-sm hover:bg-green-700"
                            >
                              ✓
                            </button>
                            <button
                              onClick={() => setEditingItem(null)}
                              className="px-3 py-1 bg-gray-500 text-white rounded text-sm hover:bg-gray-600"
                            >
                              ✕
                            </button>
                          </div>
                        </div>
                      ) : (
                        <div className="flex justify-between items-center">
                          <div className="cursor-pointer" onClick={() => handleEditItem('gasto', gasto.id, gasto.etiqueta, gasto.monto)}>
                            <div className={`font-medium ${isDark ? 'text-gray-200' : 'text-gray-800'}`}>
                              {gasto.etiqueta}
                            </div>
                            <div className="text-red-500 font-semibold text-sm">
                              {formatEuro(gasto.monto)}
                            </div>
                          </div>
                          <button
                            onClick={() => {
                              setDeleteAction(() => () => onDeleteItem(editedMovimiento.id, 'gasto', gasto.id))
                              setShowDeleteModal(true)
                            }}
                            className="group p-2 rounded-lg hover:bg-red-500/10 transition-colors"
                            title="Eliminar gasto"
                          >
                            <svg className="w-4 h-4 text-red-500 group-hover:text-red-600" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" clipRule="evenodd" />
                              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                            </svg>
                          </button>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              ) : (
                <div className={`text-center py-8 ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                  <p className="text-sm italic">No hay gastos</p>
                </div>
              )}
            </div>
          </div>

          {/* Balance y botones */}
          <div className={`mt-6 pt-4 border-t ${isDark ? 'border-gray-700' : 'border-gray-200'}`}>
            <div className="flex justify-between items-center mb-4">
              <span className={`text-lg font-semibold ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                Balance del día:
              </span>
              <span className={`text-2xl font-bold ${
                editedMovimiento.balance >= 0 ? 'text-green-500' : 'text-red-500'
              }`}>
                {formatEuro(editedMovimiento.balance)}
              </span>
            </div>
            
            <div className="flex gap-3 justify-end">
              <button
                onClick={onClose}
                className={`px-6 py-2 rounded-lg transition-colors ${
                  isDark 
                    ? 'bg-gray-600 text-gray-300 hover:bg-gray-500' 
                    : 'bg-gray-300 text-gray-700 hover:bg-gray-400'
                }`}
              >
                Cancelar
              </button>
              <button
                onClick={handleSave}
                className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                Guardar Cambios
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

// Componente de página de desglose anual
const YearlyBreakdown = ({ 
  movimientos, 
  onBack, 
  isDark,
  onGoToMonthly
}: { 
  movimientos: MovimientoDiario[]
  onBack: () => void
  isDark: boolean
  onGoToMonthly: (month: number, year: number) => void
}) => {
  const [currentYear, setCurrentYear] = useState(new Date().getFullYear())
  const [showYearCard, setShowYearCard] = useState(false)
  const [yearCardPage, setYearCardPage] = useState(0)
  
  // Obtener años que tienen movimientos
  const getAvailableYears = () => {
    const yearsWithMovements = new Set<number>()
    
    movimientos.forEach(mov => {
      const date = new Date(mov.fecha)
      yearsWithMovements.add(date.getFullYear())
    })
    
    return Array.from(yearsWithMovements).sort((a, b) => b - a) // Años más recientes primero
  }
  
  const availableYears = getAvailableYears()
  
  const yearlyMovimientos = movimientos.filter(m => {
    const date = new Date(m.fecha)
    return date.getFullYear() === currentYear
  })
  
  // Agrupar por mes
  const monthlyData = Array.from({ length: 12 }, (_, monthIndex) => {
    const monthMovimientos = yearlyMovimientos.filter(m => {
      const date = new Date(m.fecha)
      return date.getMonth() === monthIndex
    })
    
    const totalIngresos = monthMovimientos.reduce((sum, m) => sum + m.ingreso_total, 0)
    const totalGastos = monthMovimientos.reduce((sum, m) => sum + m.total_gastos, 0)
    const balance = totalIngresos - totalGastos
    
    return {
      month: monthIndex,
      monthName: new Date(currentYear, monthIndex).toLocaleDateString('es-ES', { month: 'long' }),
      totalIngresos,
      totalGastos,
      balance,
      movimientosCount: monthMovimientos.length
    }
  }).reverse() // Diciembre arriba, enero abajo
  
  const yearlyTotals = {
    ingresos: monthlyData.reduce((sum, m) => sum + m.totalIngresos, 0),
    gastos: monthlyData.reduce((sum, m) => sum + m.totalGastos, 0),
    balance: monthlyData.reduce((sum, m) => sum + m.balance, 0)
  }

  return (
    <div className={`min-h-screen ${isDark ? 'bg-gray-900' : 'bg-gray-50'}`}>
      <div className="max-w-4xl mx-auto py-8 px-4">

        {/* Cabecera del desglose anual */}
        <div className={`${isDark ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow p-6 mb-8`}>
          {/* Primera línea: Título y botón volver */}
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-3">
              <button
                onClick={onBack}
                className={`group relative overflow-hidden px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                  isDark
                    ? 'bg-gradient-to-r from-gray-600 to-gray-500 text-white shadow-md hover:shadow-gray-500/25 hover:from-gray-500 hover:to-gray-400'
                    : 'bg-gradient-to-r from-gray-500 to-gray-400 text-white shadow-md hover:shadow-gray-400/25 hover:from-gray-400 hover:to-gray-300'
                }`}
              >
                <span className="relative z-10 flex items-center gap-1">
                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clipRule="evenodd" />
                  </svg>
                  Volver
                </span>
              </button>
              <h2 className={`text-2xl font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                Resumen anual
              </h2>
            </div>
          </div>
          
          {/* Segunda línea: Año con navegación */}
          <div className="flex items-center justify-center gap-8 mb-6">
            <button
              onClick={() => setCurrentYear(currentYear - 1)}
              className={`group relative overflow-hidden px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                isDark
                  ? 'bg-gradient-to-r from-blue-600 to-blue-500 text-white shadow-md hover:shadow-blue-500/25 hover:from-blue-500 hover:to-blue-400'
                  : 'bg-gradient-to-r from-blue-500 to-blue-400 text-white shadow-md hover:shadow-blue-400/25 hover:from-blue-400 hover:to-blue-300'
              }`}
            >
              <span className="relative z-10 flex items-center gap-2">
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
                {currentYear - 1}
              </span>
            </button>
            
            <div className={`text-4xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
              {currentYear}
            </div>
            
            <button
              onClick={() => setCurrentYear(currentYear + 1)}
              className={`group relative overflow-hidden px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                isDark
                  ? 'bg-gradient-to-r from-blue-600 to-blue-500 text-white shadow-md hover:shadow-blue-500/25 hover:from-blue-500 hover:to-blue-400'
                  : 'bg-gradient-to-r from-blue-500 to-blue-400 text-white shadow-md hover:shadow-blue-400/25 hover:from-blue-400 hover:to-blue-300'
              }`}
            >
              <span className="relative z-10 flex items-center gap-2">
                {currentYear + 1}
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                </svg>
              </span>
            </button>
          </div>
          
          {/* Botón para volver al año actual */}
          {currentYear !== new Date().getFullYear() && (
            <div className="flex justify-center mb-4">
              <button
                onClick={() => setCurrentYear(new Date().getFullYear())}
                className={`px-3 py-1.5 rounded-lg text-sm font-medium transition-all duration-200 ${
                  isDark
                    ? 'bg-gray-700 hover:bg-gray-600 text-gray-300 hover:text-white border border-gray-600 hover:border-gray-500'
                    : 'bg-gray-100 hover:bg-gray-200 text-gray-600 hover:text-gray-800 border border-gray-300 hover:border-gray-400'
                }`}
              >
                Volver a {new Date().getFullYear()}
              </button>
            </div>
          )}
          
          
          <div className="grid md:grid-cols-3 gap-4">
            <div className={`p-4 rounded-lg border ${
              isDark ? 'bg-green-900/20 border-green-800' : 'bg-green-50 border-green-200'
            }`}>
              <div className="text-2xl font-bold text-green-500 mb-1">
                {formatEuro(yearlyTotals.ingresos)}
              </div>
              <div className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>
                Total Ingresos
              </div>
            </div>
            <div className={`p-4 rounded-lg border ${
              isDark ? 'bg-red-900/20 border-red-800' : 'bg-red-50 border-red-200'
            }`}>
              <div className="text-2xl font-bold text-red-500 mb-1">
                {formatEuro(yearlyTotals.gastos)}
              </div>
              <div className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>
                Total Gastos
              </div>
            </div>
            <div className={`p-4 rounded-lg border ${
              yearlyTotals.balance >= 0
                ? isDark ? 'bg-blue-900/20 border-blue-800' : 'bg-blue-50 border-blue-200'
                : isDark ? 'bg-orange-900/20 border-orange-800' : 'bg-orange-50 border-orange-200'
            }`}>
              <div className={`text-2xl font-bold mb-1 ${
                yearlyTotals.balance >= 0 ? 'text-blue-500' : 'text-orange-500'
              }`}>
                {formatEuro(yearlyTotals.balance)}
              </div>
              <div className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>
                Balance Total
              </div>
            </div>
          </div>
        </div>

        {/* Card expandible para años */}
        <div className={`rounded-lg shadow p-4 mb-6 ${isDark ? 'bg-gray-800' : 'bg-white'}`}>
          <button
            onClick={() => setShowYearCard(!showYearCard)}
            className={`w-full flex items-center justify-between p-2 rounded-lg transition-all duration-200 ${
              isDark ? 'hover:bg-gray-700' : 'hover:bg-gray-50'
            }`}
          >
            <span className={`text-sm font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
              Comprobar los años con movimientos
            </span>
            <svg 
              className={`w-4 h-4 transition-transform duration-200 ${showYearCard ? 'rotate-180' : ''} ${isDark ? 'text-gray-400' : 'text-gray-500'}`} 
              fill="currentColor" 
              viewBox="0 0 20 20"
            >
              <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
            </svg>
          </button>
          
          {showYearCard && (
            <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-600">
              {(() => {
                const itemsPerPage = 12
                const totalPages = Math.ceil(availableYears.length / itemsPerPage)
                const startIndex = yearCardPage * itemsPerPage
                const endIndex = startIndex + itemsPerPage
                const currentPageItems = availableYears.slice(startIndex, endIndex)
                
                return (
                  <>
                    <div className="grid grid-cols-4 sm:grid-cols-6 gap-3">
                      {currentPageItems.map(year => (
                        <button
                          key={year}
                          onClick={() => {
                            setCurrentYear(year)
                            setShowYearCard(false)
                            setYearCardPage(0) // Reset page when selecting
                          }}
                          className={`px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                            year === currentYear
                              ? isDark
                                ? 'bg-blue-600 text-white shadow-md'
                                : 'bg-blue-500 text-white shadow-md'
                              : isDark
                                ? 'bg-gray-700 hover:bg-gray-600 text-gray-300 hover:text-white border border-gray-600'
                                : 'bg-gray-100 hover:bg-gray-200 text-gray-700 hover:text-gray-900 border border-gray-300'
                          }`}
                        >
                          {year}
                        </button>
                      ))}
                    </div>
                    
                    {totalPages > 1 && (
                      <div className="flex items-center justify-center mt-4 gap-3">
                        <button
                          onClick={() => setYearCardPage(prev => Math.max(0, prev - 1))}
                          disabled={yearCardPage === 0}
                          className={`px-3 py-1.5 rounded-lg text-sm font-medium transition-all duration-200 ${
                            yearCardPage === 0
                              ? isDark
                                ? 'bg-gray-800 text-gray-500 cursor-not-allowed'
                                : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                              : isDark
                                ? 'bg-gray-700 hover:bg-gray-600 text-gray-300 hover:text-white border border-gray-600'
                                : 'bg-gray-100 hover:bg-gray-200 text-gray-700 hover:text-gray-900 border border-gray-300'
                          }`}
                        >
                          ←
                        </button>
                        
                        <span className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                          {yearCardPage + 1} de {totalPages}
                        </span>
                        
                        <button
                          onClick={() => setYearCardPage(prev => Math.min(totalPages - 1, prev + 1))}
                          disabled={yearCardPage === totalPages - 1}
                          className={`px-3 py-1.5 rounded-lg text-sm font-medium transition-all duration-200 ${
                            yearCardPage === totalPages - 1
                              ? isDark
                                ? 'bg-gray-800 text-gray-500 cursor-not-allowed'
                                : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                              : isDark
                                ? 'bg-gray-700 hover:bg-gray-600 text-gray-300 hover:text-white border border-gray-600'
                                : 'bg-gray-100 hover:bg-gray-200 text-gray-700 hover:text-gray-900 border border-gray-300'
                          }`}
                        >
                          →
                        </button>
                      </div>
                    )}
                  </>
                )
              })()}
            </div>
          )}
        </div>

        {/* Comparativa Anual - mostrar solo si hay movimientos en el año actual y otros años */}
        {yearlyMovimientos.length > 0 && availableYears.length > 1 && (
          (() => {
            // Filtrar otros años (excluir el año actual)
            const otrosAños = availableYears.filter(año => año !== currentYear)
            
            if (otrosAños.length === 0) {
              return null
            }
            
            // Calcular totales por año
            const totalesPorAño = otrosAños.map(año => {
              const movimientosAño = movimientos.filter(mov => {
                const fechaMov = new Date(mov.fecha)
                return fechaMov.getFullYear() === año
              })
              
              return {
                año,
                totalIngresos: movimientosAño.reduce((sum, mov) => sum + mov.ingreso_total, 0),
                totalGastos: movimientosAño.reduce((sum, mov) => sum + mov.total_gastos, 0),
                balance: movimientosAño.reduce((sum, mov) => sum + mov.balance, 0),
                diasConMovimientos: movimientosAño.length
              }
            }).sort((a, b) => b.año - a.año)
            
            return (
              <div className={`${isDark ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow p-8 mb-8`}>
                <h3 className={`text-xl font-semibold mb-6 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                  Comparativa Anual
                </h3>
                <p className={`text-base mb-8 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  Análisis comparativo entre diferentes años con movimientos
                </p>
                
                <div className="space-y-8">
                  {/* Año actual destacado */}
                  <div className={`p-6 rounded-lg border-2 ${
                    isDark ? 'bg-purple-900/20 border-purple-500' : 'bg-purple-50 border-purple-400'
                  }`}>
                    <div className="flex justify-between items-center mb-6">
                      <h4 className={`text-lg font-semibold ${isDark ? 'text-purple-300' : 'text-purple-700'}`}>
                        {currentYear} (Año Actual)
                      </h4>
                      <div className="flex items-center gap-3">
                        {/* Mostrar comparación con el año anterior si existe */}
                        {(() => {
                          const añoAnterior = totalesPorAño.find(t => t.año === currentYear - 1)
                          if (añoAnterior) {
                            const diferencia = yearlyTotals.balance - añoAnterior.balance
                            const porcentaje = añoAnterior.balance !== 0 ? ((diferencia / Math.abs(añoAnterior.balance)) * 100) : 0
                            if (diferencia !== 0) {
                              return (
                                <div className={`px-3 py-1 rounded-full text-xs font-medium ${
                                  diferencia > 0 
                                    ? 'bg-green-100 text-green-800' 
                                    : 'bg-red-100 text-red-800'
                                }`}>
                                  {diferencia > 0 ? '↗' : '↘'} {Math.abs(porcentaje).toFixed(1)}% vs {añoAnterior.año}
                                </div>
                              )
                            }
                          }
                          return null
                        })()}
                        <span className={`text-lg font-bold ${
                          yearlyTotals.balance >= 0 ? 'text-green-600' : 'text-red-600'
                        }`}>
                          {formatEuro(yearlyTotals.balance)}
                        </span>
                      </div>
                    </div>
                    
                    <div className="grid md:grid-cols-3 gap-6">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-green-500">
                          {formatEuro(yearlyTotals.ingresos)}
                        </div>
                        <div className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                          Ingresos
                        </div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-red-500">
                          {formatEuro(yearlyTotals.gastos)}
                        </div>
                        <div className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                          Gastos
                        </div>
                      </div>
                      <div className="text-center">
                        <div className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                          {yearlyMovimientos.length} días con movimientos
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  {/* Otros años */}
                  <div className="space-y-6">
                    {totalesPorAño.map(año => (
                      <div key={año.año} className={`p-5 rounded-lg border ${
                        isDark ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'
                      }`}>
                        <div className="flex justify-between items-center mb-4">
                          <h4 className={`text-lg font-semibold ${isDark ? 'text-gray-200' : 'text-gray-800'}`}>
                            {año.año}
                          </h4>
                          <div className="flex items-center gap-3">
                            {/* Comparación con año actual */}
                            {(() => {
                              const diferencia = yearlyTotals.balance - año.balance
                              const porcentaje = año.balance !== 0 ? ((diferencia / Math.abs(año.balance)) * 100) : 0
                              if (diferencia !== 0) {
                                return (
                                  <div className={`px-2 py-1 rounded-full text-xs font-medium ${
                                    diferencia > 0 
                                      ? isDark ? 'bg-green-800 text-green-200' : 'bg-green-100 text-green-800'
                                      : isDark ? 'bg-red-800 text-red-200' : 'bg-red-100 text-red-800'
                                  }`}>
                                    {diferencia > 0 ? '+' : ''}{Math.abs(porcentaje).toFixed(1)}% vs {currentYear}
                                  </div>
                                )
                              }
                              return null
                            })()}
                            <span className={`text-lg font-bold ${
                              año.balance >= 0 ? 'text-green-500' : 'text-red-500'
                            }`}>
                              {formatEuro(año.balance)}
                            </span>
                          </div>
                        </div>
                        
                        <div className="grid md:grid-cols-3 gap-6">
                          <div className="flex justify-between items-center">
                            <span className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                              Ingresos:
                            </span>
                            <span className="font-medium text-green-500">
                              {formatEuro(año.totalIngresos)}
                            </span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                              Gastos:
                            </span>
                            <span className="font-medium text-red-500">
                              {formatEuro(año.totalGastos)}
                            </span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                              Días:
                            </span>
                            <span className={`text-sm font-medium ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                              {año.diasConMovimientos}
                            </span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )
          })()
        )}

        {/* Desglose por meses */}
        <div className="space-y-4">
          <h3 className={`text-xl font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>
            Desglose Mensual
          </h3>
          {monthlyData.map((monthData) => (
            <div key={monthData.month} className={`rounded-lg shadow p-6 ${
              isDark ? 'bg-gray-800' : 'bg-white'
            }`}>
              <div className="flex justify-between items-center mb-4">
                <button
                  onClick={() => onGoToMonthly(monthData.month, currentYear)}
                  className={`group relative overflow-hidden px-4 py-2 rounded-lg text-lg font-semibold capitalize transition-all duration-200 ${
                    isDark
                      ? 'bg-gradient-to-r from-purple-600 to-purple-500 text-white shadow-md hover:shadow-purple-500/25 hover:from-purple-500 hover:to-purple-400'
                      : 'bg-gradient-to-r from-purple-500 to-purple-400 text-white shadow-md hover:shadow-purple-400/25 hover:from-purple-400 hover:to-purple-300'
                  }`}
                >
                  <span className="relative z-10 flex items-center gap-2">
                    {monthData.monthName}
                    <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                    </svg>
                  </span>
                </button>
                <div className="flex items-center gap-4">
                  <span className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                    {monthData.movimientosCount} días con movimientos
                  </span>
                  <div className={`text-lg font-bold ${
                    monthData.balance >= 0 ? 'text-green-500' : 'text-red-500'
                  }`}>
                    {formatEuro(monthData.balance)}
                  </div>
                </div>
              </div>
              
              <div className="grid md:grid-cols-2 gap-6">
                <div className="flex justify-between items-center">
                  <span className="text-green-500 font-medium">Ingresos:</span>
                  <span className="font-semibold text-green-500">
                    {formatEuro(monthData.totalIngresos)}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-red-500 font-medium">Gastos:</span>
                  <span className="font-semibold text-red-500">
                    {formatEuro(monthData.totalGastos)}
                  </span>
                </div>
              </div>
            </div>
          ))}
          
          {monthlyData.every(m => m.movimientosCount === 0) && (
            <div className={`p-6 rounded-lg border ${isDark ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'}`}>
              <div className="flex items-center gap-2">
                <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
                <p className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                  No hay movimientos registrados para el año {currentYear}
                </p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

// Componente de página de desglose mensual
const MonthlyBreakdown = ({ 
  movimientos, 
  onBack, 
  isDark,
  onUpdateMovimiento,
  onDeleteMovimiento,
  onDeleteItem,
  setDeleteAction,
  setShowDeleteModal,
  initialMonth = new Date().getMonth(),
  initialYear = new Date().getFullYear(),
  etiquetas
}: { 
  movimientos: MovimientoDiario[]
  onBack: () => void
  isDark: boolean
  onUpdateMovimiento: (updatedMovimiento: MovimientoDiario) => Promise<void>
  onDeleteMovimiento: (movimiento: MovimientoDiario) => void
  onDeleteItem: (movimientoId: number, tipo: 'ingreso' | 'gasto', itemId: number) => Promise<void>
  setDeleteAction: (action: (() => void) | null) => void
  setShowDeleteModal: (show: boolean) => void
  initialMonth?: number
  initialYear?: number
  etiquetas: {
    ingresos: string[]
    gastos: string[]
  }
}) => {
  console.log('MonthlyBreakdown rendering with:', { movimientos: movimientos.length, etiquetas })
  
  // Return temprano para evitar errores - versión temporal
  const currentMonth = new Date().getMonth()
  const currentYear = new Date().getFullYear()
  
  const monthlyMovimientos = movimientos.filter(m => {
    const date = new Date(m.fecha)
    return date.getMonth() === currentMonth && date.getFullYear() === currentYear
  })

  const monthName = new Date(currentYear, currentMonth).toLocaleDateString('es-ES', { 
    month: 'long', 
    year: 'numeric' 
  })
  
  return (
    <>
      <div className={`min-h-screen p-4 ${isDark ? 'bg-gray-900' : 'bg-gray-50'}`}>
      <div className="max-w-6xl mx-auto">
        <div className="flex items-center justify-between mb-6">
          <button
            onClick={onBack}
            className={`flex items-center gap-2 px-4 py-2 rounded-lg ${
              isDark 
                ? 'bg-gray-800 text-white hover:bg-gray-700' 
                : 'bg-white text-gray-700 hover:bg-gray-50'
            } border transition-colors`}
          >
            ← Volver
          </button>
          <h1 className={`text-2xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
            Desglose Mensual - {monthName}
          </h1>
          <div />
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <div className={`p-4 rounded-lg border ${isDark ? 'bg-green-900/20 border-green-800' : 'bg-green-50 border-green-200'}`}>
            <div className="text-2xl font-bold text-green-500 mb-1">
              {monthlyMovimientos.reduce((sum, mov) => sum + mov.ingreso_total, 0).toFixed(2)} €
            </div>
            <div className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>
              Total Ingresos
            </div>
          </div>
          
          <div className={`p-4 rounded-lg border ${isDark ? 'bg-red-900/20 border-red-800' : 'bg-red-50 border-red-200'}`}>
            <div className="text-2xl font-bold text-red-500 mb-1">
              {monthlyMovimientos.reduce((sum, mov) => sum + mov.total_gastos, 0).toFixed(2)} €
            </div>
            <div className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>
              Total Gastos
            </div>
          </div>
          
          <div className={`p-4 rounded-lg border ${
            monthlyMovimientos.reduce((sum, mov) => sum + mov.balance, 0) >= 0
              ? (isDark ? 'bg-green-900/20 border-green-800' : 'bg-green-50 border-green-200')
              : (isDark ? 'bg-red-900/20 border-red-800' : 'bg-red-50 border-red-200')
          }`}>
            <div className={`text-2xl font-bold mb-1 ${
              monthlyMovimientos.reduce((sum, mov) => sum + mov.balance, 0) >= 0 ? 'text-green-500' : 'text-red-500'
            }`}>
              {monthlyMovimientos.reduce((sum, mov) => sum + mov.balance, 0).toFixed(2)} €
            </div>
            <div className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>
              Balance
            </div>
          </div>
        </div>

        <div className="space-y-4">
          {monthlyMovimientos.length === 0 ? (
            <div className={`text-center py-8 ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
              No hay movimientos para este mes
            </div>
          ) : (
            monthlyMovimientos.map((movimiento) => (
              <div key={movimiento.id} className={`p-4 rounded-lg border ${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>
                <div className="flex justify-between items-start mb-2">
                  <h3 className={`font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                    {new Date(movimiento.fecha).toLocaleDateString('es-ES')}
                  </h3>
                  <button
                    onClick={() => onDeleteMovimiento && onDeleteMovimiento(movimiento)}
                    className="text-red-500 hover:text-red-700 text-sm"
                  >
                    Eliminar
                  </button>
                </div>
                
                {movimiento.ingresos.length > 0 && (
                  <div className="mb-3">
                    <h4 className={`text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                      Ingresos:
                    </h4>
                    <div className="space-y-1">
                      {movimiento.ingresos.map((ingreso: any) => (
                        <div key={ingreso.id} className="flex justify-between text-sm">
                          <span className={isDark ? 'text-gray-400' : 'text-gray-600'}>
                            {ingreso.etiqueta}
                          </span>
                          <div className="flex items-center gap-2">
                            <span className="text-green-500 font-medium">
                              +{ingreso.monto.toFixed(2)} €
                            </span>
                            <button
                              onClick={() => onDeleteItem && onDeleteItem(movimiento.id, 'ingreso', ingreso.id)}
                              className="text-red-500 hover:text-red-700 text-xs"
                            >
                              ×
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
                
                {movimiento.gastos.length > 0 && (
                  <div>
                    <h4 className={`text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                      Gastos:
                    </h4>
                    <div className="space-y-1">
                      {movimiento.gastos.map((gasto: any) => (
                        <div key={gasto.id} className="flex justify-between text-sm">
                          <span className={isDark ? 'text-gray-400' : 'text-gray-600'}>
                            {gasto.etiqueta}
                          </span>
                          <div className="flex items-center gap-2">
                            <span className="text-red-500 font-medium">
                              -{gasto.monto.toFixed(2)} €
                            </span>
                            <button
                              onClick={() => onDeleteItem && onDeleteItem(movimiento.id, 'gasto', gasto.id)}
                              className="text-red-500 hover:text-red-700 text-xs"
                            >
                              ×
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  )
  
};

function App() {
  const { isAuthenticated, loading: authLoading, login, logout } = useAuth()

  // Helper function to convert Date to local date string
  const formatDateForAPI = (date: Date) => {
    const year = date.getFullYear()
    const month = (date.getMonth() + 1).toString().padStart(2, '0')
    const day = date.getDate().toString().padStart(2, '0')
    return `${year}-${month}-${day}`
  }
  
  // Obtener meses que tienen movimientos
  const getAvailableMonths = () => {
    const monthsWithMovements = new Set<string>()
    
    movimientos.forEach(mov => {
      const date = new Date(mov.fecha)
      const monthYear = `${date.getFullYear()}-${date.getMonth()}`
      monthsWithMovements.add(monthYear)
    })
    
    return Array.from(monthsWithMovements)
      .map(monthYear => {
        const [year, month] = monthYear.split('-')
        return {
          year: parseInt(year),
          month: parseInt(month),
          key: monthYear,
          label: new Date(parseInt(year), parseInt(month)).toLocaleDateString('es-ES', { 
            month: 'long', 
            year: 'numeric' 
          })
        }
      })
      .sort((a, b) => {
        if (a.year !== b.year) return b.year - a.year // Años más recientes primero
        return b.month - a.month // Meses más recientes primero
      })
  }
  
  const availableMonths = getAvailableMonths()
  
  const monthlyMovimientos = movimientos.filter(m => {
    const date = new Date(m.fecha)
    return date.getMonth() === currentMonth && date.getFullYear() === currentYear
  }).sort((a, b) => new Date(b.fecha).getDate() - new Date(a.fecha).getDate()) // Orden descendente por día

  const monthName = new Date(currentYear, currentMonth).toLocaleDateString('es-ES', { 
    month: 'long', 
    year: 'numeric' 
  })
  
  const navigateMonth = (direction: 'prev' | 'next') => {
    if (direction === 'prev') {
      if (currentMonth === 0) {
        setCurrentMonth(11)
        setCurrentYear(prev => prev - 1)
      } else {
        setCurrentMonth(prev => prev - 1)
      }
    } else {
      if (currentMonth === 11) {
        setCurrentMonth(0)
        setCurrentYear(prev => prev + 1)
      } else {
        setCurrentMonth(prev => prev + 1)
      }
    }
  }

  return (
    <div className={`min-h-screen ${isDark ? 'bg-gray-900' : 'bg-gray-50'}`}>
      <div className="max-w-4xl mx-auto py-8 px-4">
        {/* Cabecera del desglose mensual */}
        <div className={`${isDark ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow p-6 mb-8`}>
          {/* Primera línea: Título y botón volver */}
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-3">
              <button
                onClick={onBack}
                className={`group relative overflow-hidden px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                  isDark
                    ? 'bg-gradient-to-r from-gray-600 to-gray-500 text-white shadow-md hover:shadow-gray-500/25 hover:from-gray-500 hover:to-gray-400'
                    : 'bg-gradient-to-r from-gray-500 to-gray-400 text-white shadow-md hover:shadow-gray-400/25 hover:from-gray-400 hover:to-gray-300'
                }`}
              >
                <span className="relative z-10 flex items-center gap-1">
                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clipRule="evenodd" />
                  </svg>
                  Volver
                </span>
              </button>
              <h2 className={`text-2xl font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                Desglose mensual
              </h2>
            </div>
          </div>
          
          {/* Segunda línea: Mes con navegación */}
          <div className="flex items-center justify-center gap-4 mb-6">
            <button
              onClick={() => navigateMonth('prev')}
              className={`group relative overflow-hidden px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                isDark
                  ? 'bg-gradient-to-r from-blue-600 to-blue-500 text-white shadow-md hover:shadow-blue-500/25 hover:from-blue-500 hover:to-blue-400'
                  : 'bg-gradient-to-r from-blue-500 to-blue-400 text-white shadow-md hover:shadow-blue-400/25 hover:from-blue-400 hover:to-blue-300'
              }`}
            >
              <span className="relative z-10 flex items-center gap-2">
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
                {new Date(currentYear, currentMonth - 1).toLocaleDateString('es-ES', { month: 'short' })}
              </span>
            </button>
            
            <div className={`text-4xl font-bold capitalize ${isDark ? 'text-white' : 'text-gray-900'}`}>
              {new Date(currentYear, currentMonth).toLocaleDateString('es-ES', { month: 'long' })} {currentYear}
            </div>
            
            <button
              onClick={() => navigateMonth('next')}
              className={`group relative overflow-hidden px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                isDark
                  ? 'bg-gradient-to-r from-blue-600 to-blue-500 text-white shadow-md hover:shadow-blue-500/25 hover:from-blue-500 hover:to-blue-400'
                  : 'bg-gradient-to-r from-blue-500 to-blue-400 text-white shadow-md hover:shadow-blue-400/25 hover:from-blue-400 hover:to-blue-300'
              }`}
            >
              <span className="relative z-10 flex items-center gap-2">
                {new Date(currentYear, currentMonth + 1).toLocaleDateString('es-ES', { month: 'short' })}
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                </svg>
              </span>
            </button>
          </div>
          
          {/* Botón para volver al mes actual */}
          {(currentYear !== new Date().getFullYear() || currentMonth !== new Date().getMonth()) && (
            <div className="flex justify-center mb-4">
              <button
                onClick={() => {
                  setCurrentYear(new Date().getFullYear())
                  setCurrentMonth(new Date().getMonth())
                }}
                className={`px-3 py-1.5 rounded-lg text-sm font-medium transition-all duration-200 ${
                  isDark
                    ? 'bg-gray-700 hover:bg-gray-600 text-gray-300 hover:text-white border border-gray-600 hover:border-gray-500'
                    : 'bg-gray-100 hover:bg-gray-200 text-gray-600 hover:text-gray-800 border border-gray-300 hover:border-gray-400'
                }`}
              >
                Volver a {new Date().toLocaleDateString('es-ES', { month: 'long', year: 'numeric' })}
              </button>
            </div>
          )}
          
        </div>
        
        {/* Card expandible para meses */}
        <div className={`rounded-lg shadow p-4 mb-6 ${isDark ? 'bg-gray-800' : 'bg-white'}`}>
          <button
            onClick={() => setShowMonthCard(!showMonthCard)}
            className={`w-full text-left flex items-center justify-between px-3 py-2 rounded-lg transition-colors ${
              isDark
                ? 'text-gray-300 hover:text-white hover:bg-gray-700'
                : 'text-gray-700 hover:text-gray-900 hover:bg-gray-50'
            }`}
          >
            <span className="text-sm font-medium">Comprobar los meses con movimientos</span>
            <svg
              className={`w-4 h-4 transition-transform ${showMonthCard ? 'rotate-180' : ''}`}
              fill="currentColor"
              viewBox="0 0 20 20"
            >
              <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
            </svg>
          </button>
          
          {showMonthCard && (
            <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-600">
              {(() => {
                const itemsPerPage = 12
                const totalPages = Math.ceil(availableMonths.length / itemsPerPage)
                const startIndex = monthCardPage * itemsPerPage
                const endIndex = startIndex + itemsPerPage
                const currentPageItems = availableMonths.slice(startIndex, endIndex)
                
                return (
                  <>
                    <div className="grid grid-cols-3 sm:grid-cols-4 gap-3">
                      {currentPageItems.map(({ year, month, key, label }) => (
                        <button
                          key={key}
                          onClick={() => {
                            const [yearStr, monthStr] = key.split('-')
                            setCurrentYear(parseInt(yearStr))
                            setCurrentMonth(parseInt(monthStr))
                            setShowMonthCard(false)
                            setMonthCardPage(0) // Reset page when selecting
                          }}
                          className={`px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                            key === `${currentYear}-${currentMonth}`
                              ? isDark
                                ? 'bg-blue-600 text-white shadow-md'
                                : 'bg-blue-500 text-white shadow-md'
                              : isDark
                                ? 'bg-gray-700 hover:bg-gray-600 text-gray-300 hover:text-white border border-gray-600'
                                : 'bg-gray-100 hover:bg-gray-200 text-gray-700 hover:text-gray-900 border border-gray-300'
                          }`}
                        >
                          {label}
                        </button>
                      ))}
                    </div>
                    
                    {totalPages > 1 && (
                      <div className="flex items-center justify-center mt-4 gap-3">
                        <button
                          onClick={() => setMonthCardPage(prev => Math.max(0, prev - 1))}
                          disabled={monthCardPage === 0}
                          className={`px-3 py-1.5 rounded-lg text-sm font-medium transition-all duration-200 ${
                            monthCardPage === 0
                              ? isDark
                                ? 'bg-gray-800 text-gray-500 cursor-not-allowed'
                                : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                              : isDark
                                ? 'bg-gray-700 hover:bg-gray-600 text-gray-300 hover:text-white border border-gray-600'
                                : 'bg-gray-100 hover:bg-gray-200 text-gray-700 hover:text-gray-900 border border-gray-300'
                          }`}
                        >
                          ←
                        </button>
                        
                        <span className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                          {monthCardPage + 1} de {totalPages}
                        </span>
                        
                        <button
                          onClick={() => setMonthCardPage(prev => Math.min(totalPages - 1, prev + 1))}
                          disabled={monthCardPage === totalPages - 1}
                          className={`px-3 py-1.5 rounded-lg text-sm font-medium transition-all duration-200 ${
                            monthCardPage === totalPages - 1
                              ? isDark
                                ? 'bg-gray-800 text-gray-500 cursor-not-allowed'
                                : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                              : isDark
                                ? 'bg-gray-700 hover:bg-gray-600 text-gray-300 hover:text-white border border-gray-600'
                                : 'bg-gray-100 hover:bg-gray-200 text-gray-700 hover:text-gray-900 border border-gray-300'
                          }`}
                        >
                          →
                        </button>
                      </div>
                    )}
                  </>
                )
              })()}
            </div>
          )}
        </div>
        

        {/* Totales del mes */}
        {monthlyMovimientos.length > 0 && (
          <div className={`${isDark ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow p-6 mb-6`}>
            <h3 className={`text-lg font-semibold mb-4 ${isDark ? 'text-white' : 'text-gray-900'}`}>
              Resumen del Mes
            </h3>
            <div className="grid md:grid-cols-3 gap-4">
              <div className={`p-4 rounded-lg border ${
                isDark ? 'bg-green-900/20 border-green-800' : 'bg-green-50 border-green-200'
              }`}>
                <div className="text-2xl font-bold text-green-500 mb-1">
                  {formatEuro(monthlyMovimientos.reduce((sum, mov) => sum + mov.ingreso_total, 0))}
                </div>
                <div className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>
                  Total Ingresos
                </div>
              </div>
              
              <div className={`p-4 rounded-lg border ${
                isDark ? 'bg-red-900/20 border-red-800' : 'bg-red-50 border-red-200'
              }`}>
                <div className="text-2xl font-bold text-red-500 mb-1">
                  {formatEuro(monthlyMovimientos.reduce((sum, mov) => sum + mov.total_gastos, 0))}
                </div>
                <div className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>
                  Total Gastos
                </div>
              </div>
              
              <div className={`p-4 rounded-lg border ${
                monthlyMovimientos.reduce((sum, mov) => sum + mov.balance, 0) >= 0
                  ? isDark ? 'bg-blue-900/20 border-blue-800' : 'bg-blue-50 border-blue-200'
                  : isDark ? 'bg-orange-900/20 border-orange-800' : 'bg-orange-50 border-orange-200'
              }`}>
                <div className={`text-2xl font-bold mb-1 ${
                  monthlyMovimientos.reduce((sum, mov) => sum + mov.balance, 0) >= 0 
                    ? 'text-blue-500' 
                    : 'text-orange-500'
                }`}>
                  {formatEuro(monthlyMovimientos.reduce((sum, mov) => sum + mov.balance, 0))}
                </div>
                <div className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>
                  Balance Total
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Sección de Análisis Comparativo */}
        {monthlyMovimientos.length > 0 && (
          (() => {
            // Obtener el mes y año actuales del desglose
            const mesActual = currentMonth
            const añoActual = currentYear
            
            // Buscar movimientos del mismo mes en otros años
            const movimientosComparativos = movimientos.filter(mov => {
              const fechaMov = new Date(mov.fecha)
              return fechaMov.getMonth() === mesActual && fechaMov.getFullYear() !== añoActual
            })
            
            if (movimientosComparativos.length === 0) {
              return null
            }
            
            // Agrupar por años
            const movimientosPorAño = {}
            movimientosComparativos.forEach(mov => {
              const año = new Date(mov.fecha).getFullYear()
              if (!movimientosPorAño[año]) {
                movimientosPorAño[año] = []
              }
              movimientosPorAño[año].push(mov)
            })
            
            // Calcular totales por año
            const totalesPorAño = Object.keys(movimientosPorAño).map(año => {
              const movs = movimientosPorAño[año]
              return {
                año: parseInt(año),
                totalIngresos: movs.reduce((sum, mov) => sum + mov.ingreso_total, 0),
                totalGastos: movs.reduce((sum, mov) => sum + mov.total_gastos, 0),
                balance: movs.reduce((sum, mov) => sum + mov.balance, 0)
              }
            }).sort((a, b) => b.año - a.año)
            
            // Totales del mes actual
            const totalesActuales = {
              totalIngresos: monthlyMovimientos.reduce((sum, mov) => sum + mov.ingreso_total, 0),
              totalGastos: monthlyMovimientos.reduce((sum, mov) => sum + mov.total_gastos, 0),
              balance: monthlyMovimientos.reduce((sum, mov) => sum + mov.balance, 0)
            }
            
            // Obtener todos los años disponibles para comparar
            const añosDisponibles = movimientos.reduce((años, mov) => {
              const año = new Date(mov.fecha).getFullYear()
              if (!años.includes(año) && año !== añoActual) {
                años.push(año)
              }
              return años
            }, []).sort((a, b) => b - a)

            return (
              <div className={`${isDark ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow p-6 mb-6`}>
                <h3 className={`text-xl font-semibold mb-4 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                  Comparativa de {new Date(añoActual, mesActual).toLocaleDateString('es-ES', { month: 'long' })}
                </h3>
                <p className={`text-base mb-6 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  Análisis comparativo del mismo mes en diferentes años
                </p>
                
                <div className="space-y-6">
                  {/* Módulo actual destacado */}
                  <div className={`p-5 rounded-lg border-2 ${
                    isDark ? 'bg-blue-900/20 border-blue-500' : 'bg-blue-50 border-blue-400'
                  }`}>
                    <div className="flex justify-between items-center mb-4">
                      <h4 className={`text-lg font-semibold ${isDark ? 'text-blue-300' : 'text-blue-700'}`}>
                        {new Date(añoActual, mesActual).toLocaleDateString('es-ES', { month: 'long' })} {añoActual}
                      </h4>
                      <div className="flex items-center gap-3">
                        {/* Mostrar comparación con el año anterior si existe */}
                        {(() => {
                          const añoAnterior = totalesPorAño.find(t => t.año === añoActual - 1)
                          if (añoAnterior) {
                            const diferencia = totalesActuales.balance - añoAnterior.balance
                            const porcentaje = añoAnterior.balance !== 0 ? ((diferencia / Math.abs(añoAnterior.balance)) * 100) : 0
                            if (diferencia !== 0) {
                              return (
                                <span className={`text-sm px-3 py-1 rounded-full ${
                                  diferencia > 0
                                    ? isDark ? 'bg-green-800/50 text-green-300' : 'bg-green-100 text-green-800'
                                    : isDark ? 'bg-red-800/50 text-red-300' : 'bg-red-100 text-red-800'
                                }`}>
                                  {diferencia > 0 ? '↗' : '↘'} {Math.abs(porcentaje).toFixed(1)}% vs {añoAnterior.año}
                                </span>
                              )
                            }
                          }
                          return null
                        })()}
                        <span className={`text-sm px-3 py-1 rounded-full ${
                          isDark ? 'bg-blue-700 text-blue-200' : 'bg-blue-100 text-blue-800'
                        }`}>
                          Mes actual
                        </span>
                      </div>
                    </div>
                    <div className="grid grid-cols-3 gap-6">
                      <div>
                        <span className={`text-green-500 font-medium text-base`}>Ingresos:</span>
                        <div className={`font-semibold text-lg ${isDark ? 'text-gray-100' : 'text-gray-900'}`}>
                          {formatEuro(totalesActuales.totalIngresos)}
                        </div>
                      </div>
                      <div>
                        <span className={`text-red-500 font-medium text-base`}>Gastos:</span>
                        <div className={`font-semibold text-lg ${isDark ? 'text-gray-100' : 'text-gray-900'}`}>
                          {formatEuro(totalesActuales.totalGastos)}
                        </div>
                      </div>
                      <div>
                        <span className={`font-medium text-base ${totalesActuales.balance >= 0 ? 'text-blue-500' : 'text-orange-500'}`}>
                          Balance:
                        </span>
                        <div className={`font-semibold text-lg ${totalesActuales.balance >= 0 ? 'text-blue-500' : 'text-orange-500'}`}>
                          {formatEuro(totalesActuales.balance)}
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  {/* Años de comparación */}
                  {añosDisponibles.map(año => {
                    const movimientosDelAño = movimientosPorAño[año]
                    
                    if (!movimientosDelAño || movimientosDelAño.length === 0) {
                      return (
                        <div key={año} className={`p-5 rounded-lg border ${
                          isDark ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-300'
                        }`}>
                          <div className="flex justify-between items-center">
                            <h4 className={`text-lg font-semibold ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                              {new Date(año, mesActual).toLocaleDateString('es-ES', { month: 'long' })} {año}
                            </h4>
                            <span className={`text-base ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                              Sin movimientos registrados
                            </span>
                          </div>
                        </div>
                      )
                    }

                    const totalesAño = totalesPorAño.find(t => t.año === año)
                    
                    return (
                      <div key={año} className={`p-5 rounded-lg border ${
                        isDark ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-300'
                      }`}>
                        <div className="flex justify-between items-center mb-4">
                          <h4 className={`text-lg font-semibold ${isDark ? 'text-gray-200' : 'text-gray-800'}`}>
                            {new Date(año, mesActual).toLocaleDateString('es-ES', { month: 'long' })} {año}
                          </h4>
                        </div>
                        <div className="grid grid-cols-3 gap-6">
                          <div>
                            <span className={`text-green-500 font-medium text-base`}>Ingresos:</span>
                            <div className={`font-semibold text-lg ${isDark ? 'text-gray-100' : 'text-gray-900'}`}>
                              {formatEuro(totalesAño.totalIngresos)}
                            </div>
                          </div>
                          <div>
                            <span className={`text-red-500 font-medium text-base`}>Gastos:</span>
                            <div className={`font-semibold text-lg ${isDark ? 'text-gray-100' : 'text-gray-900'}`}>
                              {formatEuro(totalesAño.totalGastos)}
                            </div>
                          </div>
                          <div>
                            <span className={`font-medium text-base ${totalesAño.balance >= 0 ? 'text-blue-500' : 'text-orange-500'}`}>
                              Balance:
                            </span>
                            <div className={`font-semibold text-lg ${totalesAño.balance >= 0 ? 'text-blue-500' : 'text-orange-500'}`}>
                              {formatEuro(totalesAño.balance)}
                            </div>
                          </div>
                        </div>
                      </div>
                    )
                  })}
                </div>
              </div>
            )
          })()
        )}

        <div className="space-y-6">
          {monthlyMovimientos.map((movimiento) => {
            // Debug individual de cada gasto
            movimiento.gastos.forEach((gasto, index) => {
              console.log(`🔍 Gasto ${index + 1}:`, {
                etiqueta: gasto.etiqueta,
                es_recurrente: gasto.es_recurrente,
                tipo: typeof gasto.es_recurrente,
                valor_real: JSON.stringify(gasto.es_recurrente),
                prueba_true: gasto.es_recurrente === true,
                prueba_1: gasto.es_recurrente === 1,
                prueba_string: gasto.es_recurrente === '1'
              })
            })
            
            const tieneGastosRecurrentes = movimiento.gastos.some(gasto => {
              const esRecurrente = gasto.es_recurrente === true || gasto.es_recurrente === 1 || gasto.es_recurrente === '1'
              console.log(`🔍 Evaluando ${gasto.etiqueta}: ${gasto.es_recurrente} -> ${esRecurrente}`)
              return esRecurrente
            })
            
            console.log(`🔍 Final tieneGastosRecurrentes para ${movimiento.fecha}:`, tieneGastosRecurrentes)
            
            return (
            <div key={movimiento.id} className={`rounded-lg shadow p-6 ${
              tieneGastosRecurrentes
                ? isDark 
                  ? 'bg-gray-800 border-2 border-yellow-300/40 shadow-yellow-300/10' 
                  : 'bg-white border-2 border-yellow-400/50 shadow-yellow-400/10'
                : isDark ? 'bg-gray-800' : 'bg-white'
            }`}>
              <div className="flex justify-between items-center mb-4">
                <div className="flex items-center gap-3">
                  <h2 className={`text-xl font-semibold ${isDark ? 'text-white' : 'text-gray-800'}`}>
                    {new Date(movimiento.fecha).toLocaleDateString('es-ES', { 
                      weekday: 'long',
                      day: 'numeric'
                    })}
                  </h2>
                </div>
                <div className="flex items-center gap-3">
                  <button
                    onClick={() => setEditingMovimiento(movimiento)}
                    className={`group relative overflow-hidden px-3 py-1.5 rounded-lg text-sm font-medium transition-all duration-200 ${
                      isDark
                        ? 'bg-gradient-to-r from-blue-600 to-blue-500 text-white shadow-md hover:shadow-blue-500/25 hover:from-blue-500 hover:to-blue-400'
                        : 'bg-gradient-to-r from-blue-500 to-blue-400 text-white shadow-md hover:shadow-blue-400/25 hover:from-blue-400 hover:to-blue-300'
                    }`}
                  >
                    <span className="relative z-10 flex items-center gap-1">
                      <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                      </svg>
                      Editar
                    </span>
                  </button>
                  <button
                    onClick={() => {
                      setDeleteAction(() => () => onDeleteMovimiento(movimiento))
                      setShowDeleteModal(true)
                    }}
                    className={`group relative overflow-hidden px-3 py-1.5 rounded-lg text-sm font-medium transition-all duration-200 ${
                      isDark
                        ? 'bg-gradient-to-r from-red-600 to-red-500 text-white shadow-md hover:shadow-red-500/25 hover:from-red-500 hover:to-red-400'
                        : 'bg-gradient-to-r from-red-500 to-red-400 text-white shadow-md hover:shadow-red-400/25 hover:from-red-400 hover:to-red-300'
                    }`}
                  >
                    <span className="relative z-10 flex items-center gap-1">
                      <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                      Eliminar
                    </span>
                  </button>
                  <div className={`text-lg font-bold ${
                    movimiento.balance >= 0 ? 'text-green-500' : 'text-red-500'
                  }`}>
                    {formatEuro(movimiento.balance)}
                  </div>
                </div>
              </div>

              <div className={tieneGastosRecurrentes ? "" : "grid md:grid-cols-2 gap-6"}>
                {/* Sección de ingresos - solo si no es movimiento de gasto fijo */}
                {!tieneGastosRecurrentes && (
                  <div>
                    <div className="mb-3">
                      <h3 className="text-green-500 font-medium mb-2">
                        Ingresos ({formatEuro(movimiento.ingreso_total)})
                      </h3>
                      <div className={`h-px w-full ${
                        isDark 
                          ? 'bg-gradient-to-r from-transparent via-green-400/30 to-transparent' 
                          : 'bg-gradient-to-r from-transparent via-green-500/40 to-transparent'
                      }`}></div>
                    </div>
                    {movimiento.ingresos.map((ingreso) => (
                      <div key={ingreso.id} className="flex justify-between py-1">
                        <span className={isDark ? 'text-gray-300' : 'text-gray-600'}>{ingreso.etiqueta}</span>
                        <span className="font-semibold text-green-500">{formatEuro(ingreso.monto)}</span>
                      </div>
                    ))}
                  </div>
                )}
                
                <div>
                  <div className="mb-3">
                    <h3 className="text-red-500 font-medium mb-2">
                      Gastos ({formatEuro(movimiento.total_gastos)})
                    </h3>
                    <div className={`h-px w-full ${
                      isDark 
                        ? 'bg-gradient-to-r from-transparent via-red-400/30 to-transparent' 
                        : 'bg-gradient-to-r from-transparent via-red-500/40 to-transparent'
                    }`}></div>
                  </div>
                  {movimiento.gastos.map((gasto) => (
                    <div key={gasto.id} className="flex justify-between py-1">
                      <span className={isDark ? 'text-gray-300' : 'text-gray-600'}>
                        {gasto.etiqueta}
                      </span>
                      <span className="font-semibold text-red-500">{formatEuro(gasto.monto)}</span>
                    </div>
                  ))}
                </div>
              </div>
              
              {/* Indicador prominente para gastos recurrentes */}
              {tieneGastosRecurrentes && (
                <div className={`mt-4 pt-3 border-t ${
                  isDark ? 'border-yellow-400/50' : 'border-yellow-500/50'
                }`}>
                  <div className={`flex items-center gap-3 px-3 py-2 rounded-lg ${
                    isDark ? 'bg-yellow-900/20' : 'bg-yellow-100'
                  }`}>
                    <div className={`w-3 h-3 rounded-full ${
                      isDark ? 'bg-yellow-400' : 'bg-yellow-500'
                    }`}></div>
                    <span className={`text-sm font-semibold ${
                      isDark ? 'text-yellow-200' : 'text-yellow-800'
                    }`}>
                      Movimiento creado por gasto fijo automático
                    </span>
                  </div>
                </div>
              )}
            </div>
          })}
        </div>
      </div>

      {/* Modales locales para MonthlyBreakdown */}
      <Modal
        isOpen={showDeleteModal}
        onClose={() => setShowDeleteModal(false)}
        onConfirm={() => {
          if (deleteAction) {
            deleteAction()
            setShowDeleteModal(false)
            setDeleteAction(null)
          }
        }}
        title="Confirmar eliminación"
        message="¿Estás seguro de que quieres borrar este movimiento? Esta acción no se puede deshacer."
      />
      
      <EditModal
        isOpen={!!editingMovimiento}
        onClose={() => setEditingMovimiento(null)}
        movimiento={editingMovimiento}
        isDark={isDark}
        onDeleteItem={onDeleteItem}
        onSaveChanges={async (updatedMovimiento) => {
          await onUpdateMovimiento(updatedMovimiento)
          setEditingMovimiento(null)
        }}
        etiquetas={etiquetas}
      />
    </>
  )
}

export default App
